from dotenv import load_dotenv
load_dotenv()

import nest_asyncio
nest_asyncio.apply()
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackContext, CallbackQueryHandler, filters
import requests
import asyncio
import logging
import json

# # Configure logging
# logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
# logger = logging.getLogger(name)

# Constants
API_URL = os.getenv('API_URL')
HUMAN_EXPERT_USERNAME = os.getenv('USERNAME_EXPERT')
YOUR_TOKEN = os.getenv('BOT_TOKEN')
EXPERT_CHAT_ID = os.getenv('CHAT_ID_EXPERT')



YES_NO_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("–î–∞", callback_data='yes'), InlineKeyboardButton("–ù–µ—Ç", callback_data='no')]
])

async def start(update: Update, context: CallbackContext) -> None:
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã \n"
    "–Ø ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç GeekBrains. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –ø–æ –∫—É—Ä—Å–∞–º, –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –æ –∑–∞–Ω—è—Ç–∏—è—Ö –∏ "
    "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—É—á–µ–Ω–∏–∏.\n\n"
    "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å–µ–≥–æ–¥–Ω—è? –í—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π, –¥–µ—Ç–∞–ª—è—Ö –∫—É—Ä—Å–æ–≤ "
    "–∏ –º–Ω–æ–≥–æ–º –¥—Ä—É–≥–æ–º. –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!\n\n"
    "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. üìöüñäÔ∏è"
    )

async def ask_question(update: Update, context: CallbackContext) -> None:
    
    question = update.message.text
    context.user_data['question'] = question

    response = requests.get(f"{API_URL}/ask?query={question}")
    data = response.json()
    answer = data.get('answer_text', '–ü—Ä–æ—à—É –ø—Ä–æ—â–µ–Ω–∏—è, –æ—Ç–≤–µ—Ç –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.')

    await update.message.reply_text(answer)
    await update.message.reply_text("–≠—Ç–æ —Ç–æ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ?", reply_markup=YES_NO_KEYBOARD)

async def handle_callback(update: Update, context: CallbackContext) -> None:

    query = update.callback_query
    await query.answer()

    if query.data == 'yes':
        await query.edit_message_text(text="–†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å! –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –∏—Ö. üëç", reply_markup=None)
    elif query.data == 'no':

        question = context.user_data.get('question')
        response = requests.get(f"{API_URL}/clarify?question={question}")
        data = response.json()
        similar_questions = json.loads(data)
        keyboard = [[InlineKeyboardButton(str(index+1), callback_data=str(index))] for index in range(len(similar_questions))]
        keyboard.append([InlineKeyboardButton("–ù–∏–∫–∞–∫–æ–π –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç", callback_data='none')])

        message_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, –Ω–∞–∏–±–æ–ª–µ–µ —Å—Ö–æ–∂–∏–π —Å –≤–∞—à–∏–º:\n" + \
                       '\n'.join(f"{idx+1}. {q}" for idx, q in enumerate(similar_questions))
        await query.edit_message_text(text=message_text, reply_markup=InlineKeyboardMarkup(keyboard))


async def handle_question_selection(update: Update, context: CallbackContext) -> None:
    """Handles the selection of similar questions."""
    query = update.callback_query
    await query.answer()

    if query.data == 'none':
        # Collect user information
        user = update.effective_user  # This is the user who initiated the update
        user_first_name = user.first_name if user.first_name else 'Unknown First Name'
        user_last_name = user.last_name if user.last_name else 'Unknown Last Name'
        user_id = user.id if user.id else 'Unknown ID'
        full_name = f"{user_first_name} {user_last_name}"
        user_username = f"@{user.username}" if user.username else 'Username not set'

        # Notify the user that an expert will be contacted
        await query.edit_message_text(
            text=f"–í–æ—Ç Telegram ID –Ω–∞—à–µ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞: {HUMAN_EXPERT_USERNAME}. –Ø —É–∂–µ —Å–æ–æ–±—â–∏–ª –∏–º –æ –≤–∞—à–µ–º –≤–æ–ø—Ä–æ—Å–µ, –∏ –æ–Ω–∏ —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∏–º —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –∑–∞–¥–∞–≤–∞—Ç—å –∏—Ö ‚Äì —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å!", reply_markup=None
                
        )

        # Send message to the expert about the user's question
        expert_chat_id = EXPERT_CHAT_ID  # Replace this with your expert's actual chat_id
        user_question = context.user_data.get('question', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å.')
        message_for_expert = (
           f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å:\n\n"
            f"–ò–º—è: {full_name}\n"
            f"–¢–µ–ª–µ–≥—Ä–∞–º-–ª–æ–≥–∏–Ω: {user_id}\n"
            f"–í–æ–ø—Ä–æ—Å: {user_question}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        )
        await context.bot.send_message(
            chat_id=expert_chat_id,
            text=message_for_expert
        )

    else:
        num_quest = int(query.data)
        response = requests.get(f"{API_URL}/clarify?question={context.user_data['question']}").json()
        question = json.loads(response)[num_quest]
        print(question)
        answer =requests.get(f"{API_URL}/ask?query={question}").json()['answer_text']
        await query.edit_message_text(answer)
        await query.message.reply_text("–≠—Ç–æ —Ç–æ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ?", reply_markup=YES_NO_KEYBOARD)

async def main():
    """Start the bot."""
    application = Application.builder().token(YOUR_TOKEN).build()

    application.add_handler(CommandHandler('start', start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, ask_question))
    application.add_handler(CallbackQueryHandler(handle_callback, pattern='^(yes|no)$'))
    application.add_handler(CallbackQueryHandler(handle_question_selection, pattern=r'^\d+|none$'))

    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())